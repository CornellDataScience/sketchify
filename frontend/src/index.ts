import { app, BrowserWindow, ipcMain } from "electron";
import { exec } from "child_process";
import isDev from "electron-is-dev";
import * as path from "path";
import * as fs from "fs";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

/**
 * In production mode, this returns process.resourcesPath/python because we want
 * all of our Python files to be stored inside the `python` directory in `resources`.
 *
 * In dev mode, this returns ./python because we assume that all of our python
 * files are just stored in the root directory in a `python` folder.
 */
const getPythonFilesPath = () => {
  if (isDev) {
    console.log("Running in development");
    return "./python";
  } else {
    console.log("Running in production");
    return `${process.resourcesPath}/python`;
  }
};

ipcMain.on("run-python-script", async (event, arrayBuffer, cropCoords) => {
  // Create a temporary file path
  const tempImagePath = path.join(
    app.getPath("temp"),
    "temp_cropped_image.jpg"
  );

  console.log("Received arrayBuffer:", arrayBuffer);
  const imageBuffer = Buffer.from(arrayBuffer);
  console.log("Received arrayBuffer:", imageBuffer);

  fs.writeFileSync(tempImagePath, imageBuffer);
  const { tl, br } = cropCoords;

  const pythonFilePath = getPythonFilesPath();

  // const command = `python ${pythonFilePath}/cool.py "${tempImagePath}" ${tl.x} ${tl.y} ${br.x} ${br.y}`;
  const pythonScriptPath = path.join(
    __dirname,
    "..",
    "..",
    "..",
    "ml",
    "model.py"
  );
  const command = `python ${pythonScriptPath} ${tl.x} ${tl.y} ${br.x} ${br.y} < "${tempImagePath}"`;

  exec(command, (error, stdout, stderr) => {
    // error handling
    if (error) {
      console.error(`exec error: ${error}`);
      event.reply("model-response", `Error: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      event.reply("model-response", `Error: ${stderr}`);
      return;
    }
    // Send the result back to the renderer process
    event.reply("model-response", stdout);
  });
});

// ipcMain.on("run-python-script", (event) => {
//   // Use the resources path since we want to store all of our Python files there.
//   // If you want to access the app.asar in resources, use app.getAppPath()
//   const pythonFilePath = getPythonFilesPath();
//   exec(`python ${pythonFilePath}/cool.py`, (error, stdout, stderr) => {
//     if (error) {
//       console.error(`exec error: ${error}`);
//       event.reply("python-script-response", `Error: ${error.message}`);
//       return;
//     }
//     if (stderr) {
//       console.error(`stderr: ${stderr}`);
//       event.reply("python-script-response", `Error: ${stderr}`);
//       return;
//     }
//     event.reply("python-script-response", stdout);
//   });
// });

// if (!array) {
//   console.error("No array buffer received");
//   event.reply("model-response", "Error: No data received");
//   return;
// }

// try {
//   const buffer = Buffer.from(array);
//   fs.writeFileSync(tempImagePath, buffer);

//   // Further processing...
// } catch (error) {
//   console.error("Error creating Buffer:", error);
//   event.reply("model-response", `Error: ${error.message}`);
// }
// const buffer = Buffer.from(imageBuffer);
// Write the image buffer to a file

// TODO: Change this to main.py with the correct paramters
// const { tl, br } = cropCoords;
// const command = `python ${pythonFilePath}/cool.py "${tempImagePath}" ${cropCoords.x} ${cropCoords.y} ${cropCoords.width} ${cropCoords.height}`;
